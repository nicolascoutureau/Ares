{% set title_for_layout = 'Ares' %}

{% extends 'AresCoreBundle::layout.html.twig' %}

{% block content -%}
  {% embed 'AresCoreBundle:Elements:panel.html.twig' with {title:'Mes tâches'} %}
    {% block body %}
      <table class="table table-hover general-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Description</th>
            <th>Échéance</th>
            <th>Temps estimé</th>
            <th>Temps PERSO</th>
            <th>Temps TOTAL</th>
            <th>%</th>
            <th>État</th>
            <th>Utilisateurs</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {% for usertask in usertasks %}
            
            <tr class="taskRow " data-taskId="{{ usertask[0].task.id }}">
              <td>{{ usertask[0].task.id }}</td>
              <td class="taskName">{{ usertask[0].task.name }}</td>
              <td>{{ usertask[0].task.description | truncate(20, true, '...') }}</td>
              <td style="font-weight: bold; color: #333;">{{ usertask[0].task.deadline | date('d/m/Y') }}</td>
              <td style="font-weight: bold; " class="tableEstimatedTime" data-time="{{ usertask[0].task.estimatedtime }}">{{ usertask[0].task.estimatedtime | toTime }}</td>
              <td class="tableTimePerso" style="color: #555;">
                {{ usertask['persotime'] | toTime }}
              </td>
              <td class="tableTime" style="color: #555;">
                {{ usertask['totaltime'] | toTime }}
              </td>
              <td class="timePercent">
                {% set timePercent = (usertask['totaltime'] * 100 / usertask[0].task.estimatedtime) | number_format(0, '.', '') %}
                {% if timePercent > 120 %}
                  <span class="text-danger">{{ timePercent }}%</span>
                  {% else %}
                    <span class="text-success">{{ timePercent }}%</span>
                  {% endif %}
              </td>
              <td><span class="label label-{{ usertask[0].task.state }} label-mini">{{ usertask[0].task.state | title }}</span></td>
              <td>
                {% for user in usertask[0].task.users %}
                  {{ user.username | title }}{% if loop.last is same as(false) %},{% endif %}
                {% endfor %}
              </td>
              <td><a href="#" class="selectBtn btn btn-primary btn-round btn-xs">&nbsp; SÉLECTIONNER &nbsp;</a></td>
              
              
              
              
              
              
            </tr>
          {% endfor %}
        </tbody>
      </table>
            <style>
              .table thead tr th {
                vertical-align: top;
              }
            </style>         
    {% endblock %}
  {% endembed %}

  <div class="chronometer" id="draggable">
    <h2>Chronomètre</h2>
    <div style="margin: 10px 0;">
      <select id="selectTask" class="form-control"> 
        <option value="">Sélectionner une tâche</option>
        {% for usertask in usertasks %}    
          <option value="{{ usertask[0].task.id }}">{{ usertask[0].task.name }}</option>
        {% endfor %}
      </select>
    </div>
    <div class="pull-left labelTempsChrono">Temps perso :</div><div class="timePerso">0:00:00</div>
    <div class="pull-left labelTempsChrono">Temps total :</div><div class="time">0:00:00</div>
    <div class="pull-left labelTempsChrono" style="font-weight: bold;">Temps estimé :</div><div class="timeEstimated" style="font-weight: bold; color: #767676; ">0:00:00</div>
    <br>
    <a href="" class="startBtn btn btn-primary pull-right" style="margin-left: 5px;">Start</a>
    <a href="" class="stopBtn btn btn-danger pull-right">Stop</a>
  </div>

{% endblock %}

{% block stylesheet_for_layout %}
  <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
  <style>
    /*chronometre*/
    .chronometer{
      background: white;
      padding:10px 20px;
      border-radius: 10px;
      position: absolute;
      -moz-box-shadow: 1px 1px 10px 0px #cfcfcf;
      -webkit-box-shadow: 1px 1px 10px 0px #cfcfcf;
      -o-box-shadow: 1px 1px 10px 0px #cfcfcf;
      box-shadow: 1px 1px 10px 0px #cfcfcf;
      filter:progid:DXImageTransform.Microsoft.Shadow(color=#cfcfcf, Direction=134, Strength=10);
      cursor: move;
      border: 1px solid lightgrey;
      z-index: 99999999;
      top: 0;
    }

    .labelTempsChrono {
      margin-right: 5px;
      width: 130px;
    }
  </style>
{%  endblock %}

{% block javascript_for_layout %}
  <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>

  <script>


    jQuery(document).ready(function ($) {
      
function number_format(number, decimals, dec_point, thousands_sep) {
  //  discuss at: http://phpjs.org/functions/number_format/
  // original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: davook
  // improved by: Brett Zamir (http://brett-zamir.me)
  // improved by: Brett Zamir (http://brett-zamir.me)
  // improved by: Theriault
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // bugfixed by: Michael White (http://getsprink.com)
  // bugfixed by: Benjamin Lupton
  // bugfixed by: Allan Jensen (http://www.winternet.no)
  // bugfixed by: Howard Yeend
  // bugfixed by: Diogo Resende
  // bugfixed by: Rival
  // bugfixed by: Brett Zamir (http://brett-zamir.me)
  //  revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  //  revised by: Luke Smith (http://lucassmith.name)
  //    input by: Kheang Hok Chin (http://www.distantia.ca/)
  //    input by: Jay Klehr
  //    input by: Amir Habibi (http://www.residence-mixte.com/)
  //    input by: Amirouche
  //   example 1: number_format(1234.56);
  //   returns 1: '1,235'
  //   example 2: number_format(1234.56, 2, ',', ' ');
  //   returns 2: '1 234,56'
  //   example 3: number_format(1234.5678, 2, '.', '');
  //   returns 3: '1234.57'
  //   example 4: number_format(67, 2, ',', '.');
  //   returns 4: '67,00'
  //   example 5: number_format(1000);
  //   returns 5: '1,000'
  //   example 6: number_format(67.311, 2);
  //   returns 6: '67.31'
  //   example 7: number_format(1000.55, 1);
  //   returns 7: '1,000.6'
  //   example 8: number_format(67000, 5, ',', '.');
  //   returns 8: '67.000,00000'
  //   example 9: number_format(0.9, 0);
  //   returns 9: '1'
  //  example 10: number_format('1.20', 2);
  //  returns 10: '1.20'
  //  example 11: number_format('1.20', 4);
  //  returns 11: '1.2000'
  //  example 12: number_format('1.2000', 3);
  //  returns 12: '1.200'
  //  example 13: number_format('1 000,50', 2, '.', ' ');
  //  returns 13: '100 050.00'
  //  example 14: number_format(1e-8, 8, '.', '');
  //  returns 14: '0.00000001'

  number = (number + '')
    .replace(/[^0-9+\-Ee.]/g, '');
  var n = !isFinite(+number) ? 0 : +number,
    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    s = '',
    toFixedFix = function (n, prec) {
      var k = Math.pow(10, prec);
      return '' + (Math.round(n * k) / k)
        .toFixed(prec);
    };
  // Fix for IE parseFloat(0.55).toFixed(0) = 0;
  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n))
    .split('.');
  if (s[0].length > 3) {
    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
  }
  if ((s[1] || '')
    .length < prec) {
    s[1] = s[1] || '';
    s[1] += new Array(prec - s[1].length + 1)
      .join('0');
  }
  return s.join(dec);
}      
      

      var tasksNotifiedArray = new Array();
      
      function notifyMe(percentExtraTime, taskName) {
        // Let's check if the browser supports notifications
        if (!("Notification" in window)) {
          alert("This browser does not support desktop notification");
        }
        // Let's check if the user is okay to get some notification
        else if (Notification.permission === "granted") {
          // If it's okay let's create a notification
          var notification = new Notification(taskName + " \n Temps estimé dépassé de " + percentExtraTime + "%!");
        }
        // Otherwise, we need to ask the user for permission
        else if (Notification.permission !== 'denied') {
          Notification.requestPermission(function (permission) {
            // If the user is okay, let's create a notification
            if (permission === "granted") {
              var notification = new Notification(taskName + " \n Temps estimé dépassé de " + percentExtraTime + "%!");
            }
          });
        }
        // At last, if the user already denied any notification, and you 
        // want to be respectful there is no need to bother them any more.
      }


      // Draggable
      $(function () {
        $("#draggable").draggable();
      });

      // Taches
      var taskSelected = false,
          taskLaunched = false,
          interval = 1000,
          timer = null,
          taskRowSelected,
          tempsDepasse = false;


      $('#selectTask').on('change', function (e) {
        e.preventDefault();
        if (taskLaunched) {
          console.log('Stoppez la tâche en cours avant d\'en selectionner une autre');
          return false;
        }

        var taskId = $(this).val();
        taskSelected = true;
        // Requete ajax pour récuperer le temps déja travaillé
        $.ajax({
          type: "GET",
          url: '/chronometer/timespent/' + taskId,
          dataType: "json",
          success: function (data) {
            $('.timePerso').html(secondsToTime(data.timespent.perso));
            $('.time').html(secondsToTime(data.timespent.total));
            
            
            taskRowSelected = $('.taskRow[data-taskId="' + $('#selectTask').val() + '"]');
            var timeEstimated = $(taskRowSelected).find('.tableEstimatedTime').html();
            $('.timeEstimated').html(timeEstimated.substr(1));            
            
            taskSelected = true;
          }
        });
      });


      $('.startBtn').on('click', function (e) {
        e.preventDefault();
        if (taskSelected) {
          console.log('start');
          startChrono();
          taskLaunched = true;
          // Lance le timer
          if (timer !== null)
            return;
          value = timeToSeconds($('.time').html());
          valuePerso = timeToSeconds($('.timePerso').html());
          incrementTime();
          $(taskRowSelected).find('.label-mini').html('In Progress');
          $(taskRowSelected).find('.label-mini').removeClass('label-Assigned');
          $(taskRowSelected).find('.label-mini').addClass('label-In Progress');
          
          
          timer = setInterval(function () {
            incrementTime();
          }, interval);
        } else {
          alert('Selectionnez une tâche');
        }
      });



      $('.selectBtn').on('click', function (e) {
        e.preventDefault();
        if (taskLaunched) {
          console.log('Stoppez la tâche en cours avant d\'en selectionner une autre');
          return false;
        }
        var taskId = $(this).parent().parent().attr('data-taskId');
        $('#selectTask').val(taskId);
        taskSelected = true;
        // Requete ajax pour récuperer le temps déja travaillé
        $.ajax({
          type: "GET",
          url: '/chronometer/timespent/' + taskId,
          dataType: "json",
          success: function (data) {

            $('.timePerso').html(secondsToTime(data.timespent.perso));
            $('.time').html(secondsToTime(data.timespent.total));
            taskRowSelected = $('.taskRow[data-taskId="' + $('#selectTask').val() + '"]');
            var timeEstimated = $(taskRowSelected).find('.tableEstimatedTime').html();
            $('.timeEstimated').html(timeEstimated.substr(1));
            
            
            
            taskSelected = true;
          }
        });
      });


      var incrementTime = function () {
        value = Math.round(value);
        valuePerso = Math.round(valuePerso);
        taskRowSelected = $('.taskRow[data-taskId="' + $('#selectTask').val() + '"]');
        $(taskRowSelected).find('.tableTime').html(secondsToTime(value));
        $(taskRowSelected).find('.tableTimePerso').html(secondsToTime(valuePerso));
        
        
        
        $('.time').html(secondsToTime(value));
        $('.timePerso').html(secondsToTime(valuePerso));
        
        
        var estimatedTime = $(taskRowSelected).find('.tableEstimatedTime').data('time');
        var totalTime = Math.round((Number(value)));
        
        var percentTime = number_format((totalTime * 100 / Number(estimatedTime)), 0, '.', '');
        
        if (percentTime > 120) {
          $(taskRowSelected).find('.timePercent').html('<span class="text-danger">' + percentTime +  '%</span>');
        } else {
          $(taskRowSelected).find('.timePercent').html('<span class="text-success">' + percentTime +  '%</span>');
        }
        
        
        
        var percentExtraTime = number_format((totalTime * 100 / Number(estimatedTime)) - 100);
        
        
        console.log(percentExtraTime);
{#        console.log(Number(estimatedTime));#}
        
        
{#        console.log(Number(estimatedTime) + (20 * Number(estimatedTime) / 100));#}
        
        if (percentExtraTime > 20 && tasksNotifiedArray.indexOf($('#selectTask').val()) === -1) {
          var taskName = $(taskRowSelected).find('.taskName').html();

          notifyMe(percentExtraTime, taskName);
          tasksNotifiedArray.push($('#selectTask').val());
{#          tempsDepasse = true;#}
        }

        if (value % 5 === 0) {
          updateChrono(false);
        }

        value++;
        valuePerso++;
      };


      $('.stopBtn').on('click', function (e) {
        e.preventDefault();
        if (taskSelected && taskLaunched) {
          console.log('stop');
          updateChrono(true);
          clearInterval(timer);
          timer = null;
          taskLaunched = false;
          $('#selectTask').removeAttr('disabled');
          tasksNotifiedArray = new Array();
          
          
          $(taskRowSelected).find('.label-mini').html('Assigned');
          $(taskRowSelected).find('.label-mini').removeClass('label-In Progress');
          $(taskRowSelected).find('.label-mini').addClass('label-Assigned');          
          
          
        } else {
          alert('Commencez une tâche');
        }
      });


      // Function qui démarre le chrono
      var startChrono = function () {
        $.ajax({
          type: "POST",
          url: '/chronometer/start',
          data: {
            'taskId': $('#selectTask').val()
          },
          dataType: "json",
          success: function (response) {
            console.log(response);
            $('#selectTask').attr('disabled', 'disabled');
          }
        });
      };


      // Function qui update le chrono
      var updateChrono = function (stopChrono) {
        
        console.log('ok: ' +  stopChrono);
        
        $.ajax({
          type: "POST",
          url: '/chronometer/update',
          data: {
            'taskId': $('#selectTask').val(),
            'stopChrono' : stopChrono
          },
          dataType: "json",
          success: function (response) {
            console.log(response);
          }
        });
      };


      var secondsToTime = function (s) {
        var h = Math.floor(s / 3600); //Get whole hours
        s -= h * 3600;
        var m = Math.floor(s / 60); //Get remaining minutes
        s -= m * 60;{#                console.log(h + ',' + m + ',' + s);#}
    {#                console.log(taskRowSelected);#}
    {#                console.log($(taskRowSelected).find('.tableEstimatedTime').html());#}
          return h + ":" + (m < 10 ? '0' + m : m) + ":" + (s < 10 ? '0' + s : s); //zero padding on minutes and seconds
        };

      var timeToSeconds = function (time) {
        time = time.split(':');
        console.log(time[1]);
        return(parseInt(time[0] * 3600) + parseInt(time[1] * 60) + parseInt(time[2]));
      };

        $('.table').DataTable({
          "aaSorting": [[ 3, "desc" ]]
        }); 


    });
    
    
    
    
  </script>

{% endblock %}


