{% extends 'AresCoreBundle::layout.html.twig' %}

{% block content -%}
    {% embed 'AresCoreBundle:Elements:panel.html.twig' with {title:'Mes taches'} %}
        {% block body %}
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Deadline</th>
                    <th>Estimated time</th>
                    <th>Your spent time</th>
                    <th>Total spent time</th>
                    <th>State</th>
                    <th>Users</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                {% for usertask in usertasks %}
                    <tr>
                        <td>{{ usertask.task.id }}</td>
                        <td>{{ usertask.task.name }}</td>
                        <td>{{ usertask.task.description }}</td>
                        <td>{{ usertask.task.deadline | date('d/m/Y') }}</td>
                        <td>{{ usertask.task.estimatedtime }}</td>
                        <td>{{ render(controller("AresCoreBundle:Chronometer:timeSpentByTask", {'id': usertask.task.id, 'typeTime': 'perso' })) }}</td>
                        <td>{{ render(controller("AresCoreBundle:Chronometer:timeSpentByTask", {'id': usertask.task.id, 'typeTime' : 'total' })) }}</td>
                        <td>{{ usertask.task.state | title }}</td>
                        <td>
                            {% for user in usertask.task.users %}
                              {{ user.username | title }}{% if loop.last is same as(false) %},{% endif %}
                            {% endfor %}
                        </td>
                        <td><a href="#" class="selectBtn" data-taskName="{{ usertask.task.name }}" data-taskId="{{ usertask.task.id }}">Select task</a></td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        {% endblock %}
    {% endembed %}

    <div class="chronometer" id="draggable">
        <h2>Chronometer</h2>
        <p class="currentTaskName"></p>
        <p class="currentTaskId" style="display: none"></p>
        <div class="timePerso">0:00:00</div>
        <div class="time">0:00:00</div>
        <a href="" class="startBtn">Start</a>
        <a href="" class="stopBtn">Stop</a>
    </div>

{% endblock %}

{% block stylesheet_for_layout %}
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
    <style>
        /*chronometre*/
        .chronometer{
            background: white;
            padding:10px 20px;
            border-radius: 10px;
            position: absolute;
            -moz-box-shadow: 1px 1px 10px 0px #cfcfcf;
            -webkit-box-shadow: 1px 1px 10px 0px #cfcfcf;
            -o-box-shadow: 1px 1px 10px 0px #cfcfcf;
            box-shadow: 1px 1px 10px 0px #cfcfcf;
            filter:progid:DXImageTransform.Microsoft.Shadow(color=#cfcfcf, Direction=134, Strength=10);
            cursor: move;
            border: 1px solid lightgrey;
        }
    </style>
{%  endblock %}

{% block javascript_for_layout %}
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>

<script>


    jQuery(document).ready(function($) {

        // Draggable
        $(function() {
            $( "#draggable" ).draggable();
        });

        // Taches
        var taskSelected = false,
            taskLaunched = false,
            interval = 1000,
            timer = null;

        $('.selectBtn').on('click', function(e){
            e.preventDefault();

            if(taskLaunched){
                console.log('Stoppez la tache en cours avant d\'en selectionner une autre');
                return false;
            }

            var taskName = $(this).attr('data-taskName');
            var taskId = $(this).attr('data-taskId');

            $('.currentTaskName').html(taskName);
            $('.currentTaskId').html(taskId);

            taskSelected = true;

            // Requete ajax pour récuperer le temps déja travaillé
            $.ajax({
                type: "GET",
                url: '/chronometer/timespent/' + taskId ,
                dataType: "json",
                success: function(data) {
                    
                    
                    
                    $('.timePerso').html(secondsToTime(data.timespent.perso));
                    $('.time').html(secondsToTime(data.timespent.total));
                    
                    taskSelected = true;
                }
            });
        });


        $('.startBtn').on('click', function(e){
            e.preventDefault();
            if(taskSelected){
                console.log('start');
                startChrono();
                taskLaunched = true;

                // Lance le timer
                if (timer !== null) return;
                value = timeToSeconds($('.time').html());
                valuePerso = timeToSeconds($('.timePerso').html());

                incrementTime();
                timer = setInterval(function () {
                    incrementTime();
                }, interval);

            }else{
                alert('Selectionnez une tache');
            }
        });

        var incrementTime = function(){
            value = Math.round(value);
            valuePerso = Math.round(valuePerso);
            $('.time').html(secondsToTime(value));
            $('.timePerso').html(secondsToTime(valuePerso));
            if(value%5 === 0){
                updateChrono();
            }

            value++;
            valuePerso++;
        }

        $('.stopBtn').on('click', function(e){
            e.preventDefault();
            if(taskSelected && taskLaunched){
                console.log('stop');
                updateChrono();
                clearInterval(timer);
                timer = null;
                taskLaunched = false;
            }else{
                alert('Commencez une tache');
            }
        })


        // Function qui démarre le chrono
        var startChrono = function(){
            $.ajax({
                type: "POST",
                url: '/chronometer/start',
                data: {
                    'taskId' : $('.currentTaskId').html()
                },
                dataType: "json",
                success: function(response) {
                    console.log(response);
                }
            });
        };

        // Function qui update le chrono
        var updateChrono = function(){
            $.ajax({
                type: "POST",
                url: '/chronometer/update',
                data: {
                    'taskId' : $('.currentTaskId').html()
                },
                dataType: "json",
                success: function(response) {
                    console.log(response);
                }
            });
        };

        var secondsToTime = function(s) {
            var h = Math.floor(s/3600); //Get whole hours
            s -= h*3600;
            var m = Math.floor(s/60); //Get remaining minutes
            s -= m*60;

            console.log(h + ','+  m + ',' + s);

            return h+":"+(m < 10 ? '0'+m : m)+":"+(s < 10 ? '0'+s : s); //zero padding on minutes and seconds
        }


        var timeToSeconds = function(time){
            time = time.split(':');

            console.log(time[1]);
            return( parseInt(time[0]*3600) + parseInt(time[1]*60) + parseInt(time[2])) ;
        }



    });
</script>

{% endblock %}


